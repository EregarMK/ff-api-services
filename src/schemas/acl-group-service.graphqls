# basic

schema {
    query: Query
    mutation: Mutation
}

type Query {
    aclGroup(id: ID!): AclGroup
    aclGroups: [AclGroup!]!
    linkCode(code: String!): LinkCode
    linkCodes(type: LinkCodeQueryType): [LinkCode!]!
}

type Mutation {
    createAclGroup(group: AclGroupInput): AclGroup
    updateAclGroup(group: AclGroupInput): AclGroup
    applyAclGroup(id: ID!): Boolean
    deleteAclGroup(id: ID!): Boolean

    joinCooperation(code: String!): LinkCode
    leaveCooperation(code: String!): Boolean
    deleteCooperation(code: String!): Boolean
}

# types

interface AclGroup {
    groupType: String!
    id: ID!
    captions: Object!
    settings: AclGroupSettings
}

type AclGroupSettings {
    read: Boolean!
    write: Boolean!
    delete: Boolean!
    affectingAllEntities: Boolean!
    entityAffectionSchemas: [ID!]!
}

type UserAclGroupMember {
    id: ID!
}

type Company {
    id: ID!
    name: String!
    logoUrl: String
}

type LinkCode {
    code: String!
    ownerId: ID!
    owner: Company!
    aclGroup: AclGroup!
}

type RegularAclGroup implements AclGroup {
    groupType: String!
    id: ID!
    captions: Object!
    settings: AclGroupSettings
    users: [UserAclGroupMember!]!
}

type CompanyPoolingAclGroup implements AclGroup {
    groupType: String!
    id: ID!
    captions: Object!
    settings: AclGroupSettings
    companies: [Company!]!
    linkCode: LinkCode
}

type CompanyDefaultAclGroup implements AclGroup {
    groupType: String!
    id: ID!
    captions: Object!
    settings: AclGroupSettings
}

type UserDefaultAclGroup implements AclGroup {
    groupType: String!
    id: ID!
    captions: Object!
    settings: AclGroupSettings
    user: UserAclGroupMember!
}

scalar Object

enum LinkCodeQueryType {
    OWN
    MEMBER
}

# inputs

input AclGroupInput {
    id: String
    captions: Object!
    users: [String!]
    settings: AclGroupSettingsInput
}

input AclGroupSettingsInput {
    read: Boolean!
    write: Boolean!
    delete: Boolean!
    affectingAllEntities: Boolean!
    entityAffectionSchemas: [ID!]!
}
